---
- name: Install Docker for Kubernetes
  hosts: all
  become: yes

  tasks:
    - name: Installing Dependecies & required packages
      apt:
        update_cache: yes
        state: present
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg2
    #- name: Add Docker's official GPG key
      #shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key --keyring /etc/apt/trusted.gpg.d/docker.gpg add -
    - name: Add Docker's official GPG key
      apt_key: 
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
    - name: Install Docker Packages
      apt:
        update_cache: yes
        state: present
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
    - name: Setting Docker Directory
      file: 
        path: /etc/docker
        state: directory
    - name: Copy daemon.json to Server
      copy: 
        src: daemon.json
        dest: /etc/docker/daemon.json
      notify:
        - restart-docker-service
    - name: Create /etc/systemd/system/docker.service.d
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
    - name: Enable Docker Service
      service: 
        name: docker
        state: started
        enabled: yes
    - name: Adding persmission for Local User to run docker
      file:
        path: /var/run/docker.sock
        owner: ubuntu
        group: ubuntu
  handlers:
    - name: restart-docker-service
      service:
        name: docker
        state: restarted

- name: Install Kubernetes Components
  hosts: all
  become: yes

  tasks:
    - name: Copy k8s.conf to /etc/modules-load.d/k8s.conf
      copy: 
        src: modules-load.d_k8s.conf
        dest: /etc/modules-load.d/k8s.conf
    - name: Copy k8s.conf to /etc/sysctl.d/k8s.conf
      copy:   
        src: sysctl.d_k8s.conf
        dest: /etc/sysctl.d/k8s.conf
    - name: reload Sysctl
      shell: sysctl --system
    - name: Install dependent packages
      apt: 
        update_cache: yes
        state: present
        name: 
          - apt-transport-https
          - curl
    - name: Add Kubernetes's official GPG key
      apt_key: 
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
    - name: Install Kubernetes Components
      apt: 
        update_cache: yes
        state: present
        name: 
          - kubelet
          - kubeadm
          - kubectl
    - name: Putting kubelet on hold
      dpkg_selections: 
        name: kubelet
        selection: hold
    - name: Putting kubeadm on hold
      dpkg_selections: 
        name: kubeadm
        selection: hold
    - name: Putting kubectl on hold
      dpkg_selections: 
        name: kubectl
        selection: hold
        
- name: Configure Kubernetes Control Plane on Master Node
  hosts: master
  
  tasks:
    - name: Initialise master
      become: yes
      shell: kubeadm init --apiserver-advertise-address={{ ansible_eth0.ipv4.address }}
      register: output
      ignore_errors: yes
    - name: priniting Initialisation Logs
      debug: var=output.stdout_lines
    - name: Setting up .kube folder
      file: 
        path: "~/.kube"
        state: directory
    - name: Setting up kubeconfig
      become: yes
      copy: 
        src: /etc/kubernetes/admin.conf
        dest: "~/.kube/config"
        owner: ubuntu
        group: ubuntu
        remote_src: yes
    - name: Checking Setup
      shell: kubectl get nodes
      register: output
    - name: priniting GET NODES output
      debug: var=output.stdout_lines
    - name: configuring POD network
      shell: kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml && sleep 20 && kubectl get nodes
      register: output
    - name: Priting logs after POD network deployment
      debug: var=output.stdout_lines
